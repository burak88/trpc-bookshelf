generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Veri kaynağı, tercihinize göre değiştirin
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookshelves   Bookshelf[]
  authors       Author[]
  books         Book[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookshelf {
  id        String   @id @default(uuid())
  name      String
  userId    String // Düzeltilmiş tür
  createdAt DateTime @default(now())

  user  User              @relation(fields: [userId], references: [id])
  books BookOnBookshelf[]
}

model Author {
  id     String @id @default(uuid())
  name   String
  userId String
  books  Book[]

  user User @relation(fields: [userId], references: [id])
}

model Book {
  id        String   @id @default(uuid())
  title     String
  authorId  String
  userId    String
  createdAt DateTime @default(now())

  author      Author            @relation(fields: [authorId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  bookshelves BookOnBookshelf[]
}

model BookOnBookshelf {
  id          String   @id @default(uuid())
  bookshelfId String
  bookId      String
  addedAt     DateTime @default(now())

  bookshelf Bookshelf @relation(fields: [bookshelfId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])

  @@unique([bookshelfId, bookId])
}
